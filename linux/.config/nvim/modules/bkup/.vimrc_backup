"===============YCM=====================
" let g:ycm_clangd_binary_path = 
       "~/Progm-plug/clang+llvm"
" " YCM 补全菜单配色
" " 菜单
" " highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
" " 选中项
" " highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900
" "IDE同化
" set completeopt=longest,menu
" " 补全功能在注释中同样有效
" let g:ycm_complete_in_comments=0
" " 允许 vim 加载 .ycm_extra_conf.py 文件，不再提示
" let g:ycm_confirm_extra_conf=0
" " 开启 YCM 标签补全引擎
" let g:ycm_collect_identifiers_from_tags_files=1
" " 引入 C++ 标准库tags
" set tags+=/data/misc/software/misc./vim/stdcpp.tags
" " YCM 集成 OmniCppComplete 补全引擎，设置其快捷键
" inoremap <leader>; <C-x><C-o>
" " 补全内容不以分割子窗口形式出现，只显示补全列表
" set completeopt-=preview
" " 从第一个键入字符就开始罗列匹配项
" let g:ycm_min_num_of_chars_for_completion=2
" " 禁止缓存匹配项，每次都重新生成匹配项
" let g:ycm_cache_omnifunc=0
" " 语法关键字补全
" let g:ycm_seed_identifiers_with_syntax=1
" " 禁用语法
" " let g:ycm_filepath_blacklist = {}
" "语法白名单
" let g:ycm_filepath_whitelist = {'html': 1, 'jsx': 1, 'xml': 1, 'css': 1}
" "电动是巴拿
" let g:ycm_auto_trigger=1
" let g:ycm_semantic_triggers = {
    " \   'css': [ 're!^', 're!^\s+', ': ' ],
    " \   'scss': [ 're!^', 're!^\s+', ': ' ],
    " \ }
        " " let g:ycm_semantic_triggers = {
        " " \'c' : ['->', '    ', '.', ' ', '(', '[', '&'],
        " " \'cpp,objcpp' : ['->', '.', ' ', '(', '[', '&', '::'],
        " " \'perl' : ['->', '::', ' '],
        " " \'php' : ['->', '::', '.'],
        " " \'cs,java,javascript,d,vim,python,perl6,scala,vb,elixir,go' : ['.'],
        " " \'ruby' : ['.', '::'],
        " " \'lua' : ['.', ':'],
        " " \'scss,css': [ 're!^\s{2,4}', 're!:\s+' ],
        " " \'html': ['<', '"', '</', ' '],
        " " \'javascript': ['.', 're!(?=[a-zA-Z]{3,4})'],
        " " \}
" endif

"================ctrlp=====================
" Use Silver Searcher for CtrlP plugin (if available) Fallback to git ls-files for fast listing. Because we use fast strategies, disable caching.
let g:ctrlp_use_caching = 0
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git',
    \ 'cd %s && git ls-files . -co --exclude-standard',
    \ 'find %s -type f' ]

" Make sure pasting in visual mode doesn't replace paste buffer
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction
function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()
endif

"================ctrlp-plug-python=====================
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' } 
